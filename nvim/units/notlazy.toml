[[plugins]]
repo = 'Shougo/dein.vim'

#[[plugins]]
#repo = 'prabirshrestha/asyncomplete.vim'
#
#[[plugins]]
#repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'osyo-manga/vim-over'
hook_add = '''
    nnoremap <silent> <Space>o :OverCommandLine<CR>%s//g<Left><Left>
    vnoremap <silent> <Space>o :OverCommandLine<CR>s//g<Left><Left>
    nnoremap sub :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left><Paste>
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = "airblade/vim-gitgutter"
hook_add = '''
    let g:gitgutter_map_keys = 0
    nmap [g <Plug>GitGutterPrevHunk
    nmap ]g <Plug>GitGutterNextHunk
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
build = 'yarn install --frozen-lockfile'
hook_add = '''
    source ~/dotfiles/nvim/plugins/coc.vim
'''

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# rev = 'next'
# on_ft = ['julia', 'rust']
# build = ':UpdateRemotePlugins'
# hook_add = '''
#     let g:LanguageClient_autoStart = 1
#     let g:LanguageClient_serverCommands = {
#         \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
#         \ 'julia': ['julia', '--startup-file=no', '--history-file=no', '-e', '
#         \    using LanguageServer;
#         \    using Pkg;
#         \    import StaticLint;
#         \    import SymbolServer;
#         \    env_path = dirname(Pkg.Types.Context().env.project_file);
#         \    debug = false; 
#         \    server = LanguageServer.LanguageServerInstance(stdin, stdout, debug, env_path, "", Dict());
#         \    server.runlinter = true;
#         \    run(server);
#         \   '],
#         \ }
# 
#     nnoremap <F5> :call LanguageClient_contextMenu()<CR>
#     " Or map each action separately
#     nnoremap K :call LanguageClient#textDocument_hover()<CR>
#     nnoremap gd :call LanguageClient#textDocument_definition()<CR>
#     nnoremap <leader>d :call LanguageClient#textDocument_definition()<CR>
#     nnoremap <F2> :call LanguageClient#textDocument_rename()<CR>
# '''

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_event = "InsertEnter"
# hook_add = '''
#     let g:deoplete#enable_at_startup = 1
#     let g:deoplete#auto_complete_delay = 0
#     let g:deoplete#auto_complete_start_length = 1
#     let g:deoplete#enable_camel_case = 0
#     let g:deoplete#enable_ignore_case = 0
#     let g:deoplete#enable_refresh_always = 0
#     let g:deoplete#enable_smart_case = 1
#     let g:deoplete#file#enable_buffer_path = 1
#     let g:deoplete#max_list = 10000
# '''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'
hook_add = '''
    autocmd FileType vue syntax sync fromstart

    let g:ft = ''
    function! NERDCommenter_before()
      if &ft == 'vue'
        let g:ft = 'vue'
        let stack = synstack(line('.'), col('.'))
        if len(stack) > 0
          let syn = synIDattr((stack)[0], 'name')
          if len(syn) > 0
            exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
          endif
        endif
      endif
    endfunction
    function! NERDCommenter_after()
      if g:ft == 'vue'
        setf vue
        let g:ft = ''
      endif
    endfunction
'''

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# depends = 'context_filetype.vim'
# on_event = 'InsertCharPre'
# on_ft = 'snippet'
# hook_add = '''
#     imap <C-j> <Plug>(neosnippet_expand_or_jump)
#     smap <C-j> <Plug>(neosnippet_expand_or_jump)
#     xmap <C-j> <Plug>(neosnippet_expand_target)
#     let g:neosnippet#enable_snipmate_compatibility = 1
#     let g:neosnippet#enable_completed_snippet = 1
#     let g:neosnippet#expand_word_boundary = 1
# '''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

#[[plugins]]
#repo = 'Shougo/context_filetype.vim'
#
#[[plugins]]
#repo = "osyo-manga/vim-precious"

[[plugins]]
repo='leafgarland/typescript-vim'

[[plugins]]
repo='haya14busa/incsearch.vim'
hook_source = '''
  set hlsearch
  let g:incsearch#auto_nohlsearch = 1
  map n  <Plug>(incsearch-nohl-n)
  map N  <Plug>(incsearch-nohl-N)
  map *  <Plug>(incsearch-nohl-*)
'''

[[plugins]]
repo='easymotion/vim-easymotion'
hook_add = '''
  " japanise move
  let g:EasyMotion_use_migemo = 1

  map f <Plug>(easymotion-bd-f)
  nmap f <Plug>(easymotion-overwin-f)
  nmap s <Plug>(easymotion-overwin-f2)

  " Move to line
  map L <Plug>(easymotion-bd-jk)
  nmap L <Plug>(easymotion-overwin-line)
  
  " Move to word
  map  w <Plug>(easymotion-bd-w)
  nmap w <Plug>(easymotion-overwin-w)

  " You can use other keymappings like <C-l> instead of <CR> if you want to
  " use these mappings as default search and sometimes want to move cursor with
  " EasyMotion.
  function! s:incsearch_config(...) abort
    return incsearch#util#deepextend(deepcopy({
    \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
    \   'keymap': {
    \     "\<CR>": '<Over>(easymotion)'
    \   },
    \   'is_expr': 0
    \ }), get(a:, 1, {}))
  endfunction
  
  noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
  noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
  noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))
'''

[[plugins]]
repo='haya14busa/incsearch-easymotion.vim'
depends = ['incsearch.vim', 'easymotion/vim-easymotion']
hook_add = '''
  map z/ <Plug>(incsearch-easymotion-/)
  map z? <Plug>(incsearch-easymotion-?)
  map zg/ <Plug>(incsearch-easymotion-stay)
'''

#[[plugins]]
#repo='tpope/vim-repeat'
#hook_add = '''
#    silent! call repeat#set("\<Plug>(easymotion-repeat)",v:count)
#'''

[[plugins]]
repo='JuliaEditorSupport/julia-vim'
hook_add = '''
    let g:default_julia_version = '1.1'
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add = '''
    let g:rustfmt_autosave = 1
'''
