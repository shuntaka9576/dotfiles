[[snippets]]
  description = "特定行表示"
  command = "ls -al |awk '{print $1,$9}'"
  tag = ["awk"]
  output = ""

[[snippets]]
  description = "マージされたPR一覧"
  command = "gh pr list -L 100 --state merged | awk -F '\\t' '{print \"#\" $1,$2}'"
  tag = ["awk"]
  output = ""

[[snippets]]
  description = "GOPATH modeに変更"
  command = "set --export GO111MODULE off"
  tag = ["go"]
  output = ""

[[snippets]]
  description = "ディレクトリ内のファイル分実行するコマンドを生成する"
  command = "ls -al tests/e2e |awk '{print $7}' | xargs -I {} echo 'yarn test-e2e --runTestsByPath ./tests/e2e/{}'"
  tag = ["xargs", "awk"]
  output = ""

[[snippets]]
  description = "Proxy環境下で、curl"
  command = "curl -v --proxy http://{adress}:{port} -o /dev/null https://www.google.com"
  tag = ["curl"]
  output = ""

[[snippets]]
  description = "curlでnoproxyを設定"
  command = 'curl -v --noproxy localhost http://localhost:3000'
  tag = ["curl"]
  output = ""

[[snippets]]
  description = "curlでヘッダーのみ表示"
  command = 'curl -D - -s  -o /dev/null "https://api.hozi.dev/v1/users/hozi576/articles?type=tech"'
  tag = ["curl"]
  output = ""

[[snippets]]
  description = "module modeをoffにする"
  command = 'export GO111MODULE=off'
  tag = ["go"]
  output = ""

[[snippets]]
  description = "並列にスタックデプロイ"
  command = """
env | perl -nle 'print "export $1;" if /(AWS.*?)$/';
xpanes -stc 'export STAGE_NAME=<STAGE_NAME>;
cdk deploy -c stageName=$STAGE_NAME $STAGE_NAME-{}' \
  <stack1> \
  <stack2>
"""
  tag = ["xpanes", "cdk"]


[[snippets]]
  description = "curlで速度を測る"
  command = '''
cat <(echo "time\thttp_code\ttime_namelookup\ttime_connect\ttime_pretransfer\ttime_starttransfer\ttime_total") \
<(for i in $(seq 1 5); do
  TIME_STAMP=$(date '+%y/%m/%d %H:%M:%S')
  curl -X GET \
     --url "https://api.hozi.dev/v1/users/hozi576/articles?type=tech" \
    --header "Content-Type: application/json" \
    --show-error \
    --silent \
    --write-out "$TIME_STAMP\t%{http_code}\t%{time_namelookup}\t%{time_connect}\t%{time_pretransfer}\t%{time_starttransfer}\t%{time_total}\n" \
    --output /dev/null
  sleep 5
done) | tee >(pbcopy)
'''
  tag = ["curl"]
  output = ""

# --data '{"test": {"test": true}}' \
# --header "authorization: Bearer $token"'

[[snippets]]
  description = "Check listening port"
  command = "lsof -i -P | grep 8888"
  tag = ["port"]
  output = ""

[[snippets]]
  description = "Check process"
  command="ps auxfww"
  tag = ["ps"]
  output = ""

[[snippets]]
  description = "1行目を非表示で出力"
  command = "sed 1d {f}"
  tag = ["sed"]
  output = ""

[[snippets]]
  description = "1〜3行目を非表示で出力"
  command = "sed 1,3d {f}"
  tag = ["sed"]
  output = ""

[[snippets]]
  description = "Pythonプロジェクトを初期化"
  command = "echo '.venv'>>.gitignore;pipenv install --dev black flake8 isort python-language-server --pre;prn"
  tag = ["python"]
  output = ""

[[snippets]]
  description = "Neovimのswapファイルを削除"
  command = ' rm -rf ~/.local/share/nvim/swap'
  tag = ["nvim"]
  output = ""

[[snippets]]
  description = "カレントのプラグインを読み込む"
  command = 'nvim --cmd "set rtp+=."'
  tag = ["nvim"]
  output = ""

[[snippets]]
  description = "packerプラグインの管理パスへ移動"
  command = 'cd ~/.local/share/nvim/site/pack/packer/start'
  tag = ["nvim"]
  output = ""

[[snippets]]
  description = "コンテナ全停止削除"
  command = 'docker ps -aq| xargs docker stop;docker ps -aq| xargs docker rm;docker images -aq| xargs docker rmi -f;docker ps -a;docker images -a;'
  tag = ["docker"]
  output = ""

# Git
[[snippets]]
  description = "Author指定でステップ数カウント"
  command = 'git ls-files | xargs -n1 git --no-pager blame -f -w | grep <username> | wc -l'
  tag = ["git"]
  output = ""

[[snippets]]
  description = "submoduleをclone"
  command = 'git submodule update --init --recursive'
  tag = ["git"]
  output = ""

[[snippets]]
  description = "amend時にコミット時刻を変更"
  command = 'git commit --amend --date="Thu Mar 27 17:20:22 2020 +0900";git rebase HEAD~1 --committer-date-is-author-date;git log --pretty=fuller'
  tag = ["git"]
  output = ""

[[snippets]]
  description = "git logでコミット時刻を取得"
  command = 'git log --pretty=fuller'
  tag = ["git"]
  output = ""

[[snippets]]
  description = "git tagの削除コマンド"
  command = 'git tag -d tag_name;git push origin :refs/tags/tag_name'
  tag = ["git"]
  output = ""

[[snippets]]
  description = "gitでタグづけ"
  command = 'git tag v0.1.0;git push --tags'
  tag = ["git"]
  output = ""

[[snippets]]
  description = "HEADを取得"
  command = 'git rev-parse --short HEAD'
  tag = ["git"]
  output = ""

# Perlワンライナー
# -e 'スクリプト'： 実行するPerlスクリプトを指定
[[snippets]]
  description = "改行をつける(-l)"
  command = "perl -le 'print \"Hello\"'"
  tag = ["perl"]
  output = ""

[[snippets]]
  description = "if elseを使った置換"
  command = "echo \"\\`\\`\\`bash\\n\\`\\`\\`\\\\n\\`\\`\\`toml\\n\\`\\`\\`\" | perl -nle '$i++;if (/^```(\\w+)$/){$a=$1; print \"[$1]\";}elsif(/```/){print \"[/$a]\"}else{print $_}'"
  tag = ["perl"]

[[snippets]]
  description = "標準入力の最後に行を追加する"
  command = "echo \"foo.log\\nfoo.log.2021-07-16\\nfoo.log.2021-07-17\\nfoo.log.2021-07-18\" | perl -nle 'if(eof){print \"$_\\nfoo.log\"}elsif(/foo.log..*/){print $_}'"
  tag = ["perl"]

[[snippets]]
  description = "ファイルごとにきまった文字をカウントする"
  command = "find nvim -type f |sort | xargs -I{} perl -nle '$i++ while /vim/g}{print \"$ARGV: $i回\"' {}"
  tag = ["perl"]

[[snippets]]
  description = "ファイルを読み込んで1行ずつ処理する(-n)"
  command = "perl -nle '$i++;print \"$i: $_\"' README.md"
  tag = ["perl"]
  output = ""

[[snippets]]
  description = "-nの機能に加えて$_をprintする(-p)"
  command = "perl -pe 's/dotfiles/aaaa/g' README.md"
  tag = ["perl"]
  output = ""

[[snippets]]
  description = "最短マッチで文字列抽出(?無しで最長マッチ)"
  command = "echo 'aaaa(cccc)aaaaa' |perl -ne 'print \"$1\" if /.*\\((.*?)\\).*/'"
  tag = ["perl"]
  output = ""

[[snippets]]
  description = "tab区切りの出力処理"
  command = "echo \"col1\\tcol2\\tcol3\" |perl -F'\\t' -lne 'print \"$F[1]\"'"
  tag = ["perl"]
  output = ""

[[snippets]]
  description = "標準入力からの置換"
  command = "echo \"1(2100), 2(1900), 3(1800)\" | perl -pe 's/\\(.*?\\)//g'"
  tag = ["perl"]
  output = ""

[[snippets]]
  description = "ディレクトリ指定一括置換"
  command = "find dir1 dir2 | xargs perl -i -pe 's/foo/hoge/g'"
  tag = ["perl"]
  output = ""

[[snippets]]
  description = "配列形式に変換"
  command = '''
ls | grep ".ts" | perl -nle '$i++;if ($i==1){print "[\"$_\", "}elsif(!eof){print "\"$_\", "}elsif(eof){print "\"$_\"]"}' |  perl -pe 's/\n//g' | jq -c
'''
  tag = ["perl"]
  output = ""

# aws
[[snippets]]
  description = "codecommitのリポジトリ一覧出力"
  command = "aws codecommit list-repositories | jq -r '.repositories[].repositoryName'"
  tag = ["aws"]
  output = ""
[[snippets]]
  description = "codecommitのリポジトリを全てクローン"
  command = "aws codecommit list-repositories | jq -r '.repositories[].repositoryName'| xargs -I{} ghq get https://git-codecommit.ap-northeast-1.amazonaws.com/v1/repos/{}" # -Iで改行区切りで一つ一つコマンドを実行してくれる
  tag = ["aws"]
  output = ""
[[snippets]]
  description = "codecommitのリポジトリを全て更新"
  command = "aws codecommit list-repositories | jq -r '.repositories[].repositoryName'| xargs -I{} ghq get -u https://git-codecommit.ap-northeast-1.amazonaws.com/v1/repos/{}"
  tag = ["aws"]
  output = ""
[[snippets]]
  description = "AWSの環境変数出力"
  command = "env | perl -nle 'print \"export $1;\" if /(AWS.*?)$/';"
  tag = ["aws"]
  output = ""

# jq
[[snippets]]
  description = "jsonのcsv変換"
  command = """
echo '{"persons": [{"attributes": {"filedName": "namevalue", "filedAge": 20}}]}' | jq -r '["name", "age"], (.persons[] |[.attributes.filedName, .attributes.filedAge]) | @csv'
"""
  tag = ["jq"]

# Terraform
[[snippets]]
  description = "setup dokernized terraform"
  command = "docker pull hashicorp/terraform:0.12.5;docker run --rm hashicorp/terraform:0.12.5 --version"
  tag = ["terraform"]
  output = ""

[[snippets]]
  description = "start dokernized terraform"
  command = """
docker run --rm -i -v $PWD:/work -w /work \
-e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
-e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
-e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION \
hashicorp/terraform:0.12.5 <command>
  """
  tag = ["terraform"]
  output = ""

# TypeScirpt
[[snippets]]
  description = "TypeScriptをスクリプト実行"
  command = "ts-node --project ~/dotfiles/nvim/languages/ts/tsconfig.json"
  tag = ["typescript"]
  output = ""

# Encode/Decode
[[snippets]]
  description = "base64にエンコード"
  command = "echo -n 'テスト' | base64"
  tag = ["base64", "encode"]

[[snippets]]
  description = "base64にデコード"
  command = "echo -n '44OG44K544OI' | base64 -D"
  tag = ["base64", "decode"]

[[snippets]]
  description = "sha256 digestを取得"
  command = "openssl dgst -sha256 ~/Downloads/kanban_darwin_x86_64.tar.gz"
  tag = ["openssl", "sha256"]

# ----------------------------------------------------------------
# blog
[[snippets]]
  description = "blog"
  command = "ulid| tr A-Z a-z | xargs -I {} touch 'articles/{}.md'"
  tag = ["blog"]

# web
[[snippets]]
  description = "lighthouse"
  command = "lighthouse http://localhost:3000 --view"
  tag = ["lighthouse"]

# nvim/vim
[[snippets]]
  description = "development nvim plugin"
  command = "nvim -u ~/repos/github.com/shuntaka9576/init.vim/init.vim"
  tag = ["nvim"]

[[snippets]]
  description = "development vim plugin"
  command = "vim -u ~/repos/github.com/shuntaka9576/init.vim/init.vim"
  tag = ["vim"]

# deno
[[snippets]]
  description = "deno fmt"
  command = "deno fmt --ext ts --unstable --watch"
  tag = ["deno"]

# openssl
[[snippets]]
  description = "証明書チェーンを確認する"
  command = "openssl s_client -connect www.google.com:443 -showcerts"
  tag = ["openssl"]

[[snippets]]
  description = "証明書のデコード"
  command = "openssl x509 -text -noout -in rootCA.pem"
  tag = ["openssl"]

[[snippets]]
  description = "secretを利用したSHA256ハッシュダイジェストの取得"
  command = 'echo "test" | openssl dgst -sha256 -hmac "secret_token" | perl -pe "s/\\(stdin\\)= //g"'
  tag = ["openssl"]

[[snippets]]
  description = "ポートスキャン"
  command = "nmap 192.168.1.5 -p 1-65535"
  tag = ["network"]

[[snippets]]
  description = "ARP(IPレンジに対して、応答したデバイスのMACアドレス取得)"
  command = "ip neigh"
  tag = ["network", "linux"]

[[snippets]]
  description = "ARP(IPレンジに対して、応答したデバイスのMACアドレス取得)"
  command = " sudo arp-scan -I en0 -l"
  tag = ["network", "mac"]

[[snippets]]
  description = "PlatformIOでccls定義ファイルを吐き出す"
  command = "pio init --board=m5stack-core2 --project-option=\"framework=espidf\" --ide vim"
  tag = ["PlatformIO"]

[[snippets]]
  description = "ファームウェアの削除,アップロード,転送"
  command = "pio run --upload-port /dev/cu.SLAB_USBtoUART -t upload;pio device monitor -p /dev/cu.SLAB_USBtoUART --raw"
  tag = ["PlatformIO"]

[[snippets]]
  description = "Cのビルド"
  command = "gcc -std=c99 -o main main.c; ./main"
  tag = ["C"]

[[snippets]]
  description = "google/zxの実行"
  command = "zx --quiet http://zxsh.dev/hello.mjs"
  tag = ["zx"]

[[snippets]]
description = "cargoテストで標準出力を表示"
command = "cargo test -- --nocapture"
tag = ["rust"]
output = ""

[[snippets]]
description = "preview cloudflare pages"
command = "yarn wrangler pages dev --live-reload true ./public"
tag = ["wrangler", "cloudflare"]
output = ""

[[snippets]]
description = "PKCEにおけるcode_challenge生成"
command = '''
echo -n "dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk" \
| sha256sum \
| xxd -r -p \
| base64 \
| sed -e 's/=//g' \
| sed -e 's/+/-/g' \
| sed -e 's/\//_/g'
'''
tag = ['oauth']

[[snippets]]
description = "GitHubのマークダウンパース"
command = "gh api -X POST /markdown -f \"text=$(cat README.md)\""
tag = ['GitHub']

[[snippets]]
description = "リポジトリ作成"
command = "gh repo create ssscp --private"
tag = ['GitHub']
output = ""

[[snippets]]
description = "ローカルからssh先のファイルを取得する"
command = "scp -r -P {port} pi@{sshToAddress}:/home/pi/log.zip ~/"
tag = ['scp']

[[snippets]]
description = "Go ARMビルド"
command = "GOOS=linux GOARCH=arm GOARM=7 go build"
tag = ['go']

[[snippets]]
description = "systemdで特定のサービスのジャーナルを監視する"
command = "journalctl -u litestream -f"
tag = ['systemd']

[[snippets]]
description = "テストデータ作成"
command = 'while true; do echo "{\"createdAt\":{\"N\":\"1652940797\"},\"uuid\":{\"S\":\"$(uuid)$(uuid)\"}}"; done'
tag = ['testdata']

[[snippets]]
description = "リリースノート作成"
command = 'ghch -r . --format markdown --from=main --to=release'
tag = ['release', 'ghch']

[[snippets]]
description = "goreleaserでリリース"
# distディレクトリに資材が残っているとFailするため、無視するオプションを利用
command = 'goreleaser release --rm-dist'
tag = ['goreleaser', 'release']

[[snippets]]
description = "goreleaser(dry run)"
# distディレクトリに資材が残っているとFailするため、無視するオプションを利用
command = 'goreleaser release --snapshot --rm-dist --skip-publish'
tag = ['goreleaser', 'release']

[[snippets]]
description = "syscallの確認"
command = 'sudo strace -e network curl https://wwww.google.com'
tag = ['strace']

# zig
[[snippets]]
description = "zigのビルド及び実行"
command = 'zig build run'
tag = ['zig']
